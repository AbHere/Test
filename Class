WITH ChangeInfo AS (
  SELECT
      ats.code,
      ats.sequence,
      ru.name       AS changer_name,
      atc.datemodif AS change_date
  FROM (
    SELECT
        code,
        sequence,
        numero,
        TRUNC(start_validity) AS start_validity,
        LAG(TRUNC(start_validity)) OVER (
          PARTITION BY code
          ORDER BY numero
        ) AS prev_start
    FROM audit_tierssettlement
    WHERE code IN (:AuditTierSequence, :PreviousAuditTierSequence)
  ) ats
  JOIN audit_tiers_compo atc
    ON atc.sequence = ats.code    -- âœ… keep your current working link
  LEFT JOIN riskusers ru
    ON ru.ident = atc.id
  WHERE ats.prev_start = DATE '2099-12-31'
    AND ats.start_validity < DATE '2099-12-31'
),
SettlementResults AS (
  SELECT 
      ats.ID,
      ats.ACCOUNT_ROUTER,
      decode(ats.ACCOUNT_TYPE,1,'Both',2,'Cash',3,'Instrument',ats.ACCOUNT_TYPE) ACCOUNT_TYPE,
      ats.AGENT_ID,
      DECODE(ats.ALLOTMENT, -1, '*', A.LIBELLE) ALLOTMENT,
      ats.BANKID,
      decode(ats.BANKID,-1,'*', (select name from tiers where ident in(ats.BANKID)) ) AS Financial_Institution,
      ats.BANKNUM,
      ats.BENEFICIAIRE,
      ats.BO_TREASURY_ACCOUNT_ID,
      DECODE(ats.BUSINESS_EVENT, -1, '*') BUSINESS_EVENT,
      ats.CARVE_OUT,
      ats.CODE,
      ats.COMMENTAIRE1,
      ats.CONDITION,
      ats.CONDITION2,
      ats.CONDITION3,
      ats.CONTACTNAME,
      ats.COUNTRYCODE,
      DECODE(ats.CURRENCY, -1, '*', DEVISE_TO_STR(ats.CURRENCY)) CURRENCY,
      ats.CUSTODIAN_ID,
      DECODE(ats.DELIVERY_TYPE, -1, '*', 1, 'DVP', 2, 'FOP', 3, 'N/A') DELIVERY_TYPE,
      DECODE(ats.DEPOSITARY, -1, '*', DP.NAME) DEPOSITARY,
      ats.END_VALIDITY,
      ats.IBKACCOUNT,
      ats.INFO1,
      ats.INFO2,
      ats.INFO3,
      ats.INFO4,
      ats.INFO5,
      ats.INFO6,
      ats.INITIAL_DEPOSITORY,
      ats.LOSTRO1_CODE,
      ats.LOSTRO1_CODETYPE,
      decode(ats.MARKET, -1,'*', NUM_TO_STR(ats.MARKET)  || ' - ' || (select libelle from marche where mnemomarche in (ats.MARKET) )) AS MARKET,
      ats.PAYMENT,
      DECODE(ats.PAYMENT, -1, '*', PM.LIBELLE) PAYMENTMETHOD,
      PS.NAME AS PLACE_OF_SETTLEMENT,
      ats.ROUTING,
      ats.SEQUENCE,
      decode(ats.SIGN,1,'(+)',2,'(0)',3,'(-)','(*)') AS Sign,
      ats.SSI_PATH_ID,
      ats.START_VALIDITY,
      decode(ats.TYPE,1,'*',2,'Counterparty',3,'Broker',4,'Depositary',5,'Entity',6,'Counterparty 2',ats.TYPE) AS TYPE,
      decode(ats.UNDERLYING_ALLOTMENT , -1,'*',(select libelle from affectation where ident = ats.UNDERLYING_ALLOTMENT )) AS UNDERLYING_ALLOTMENT,
      decode(ats.UNDERLYING_CURRENCY, -1, '*', DEVISE_TO_STR(ats.UNDERLYING_CURRENCY)) AS UNDERLYING_CURRENCY,
      decode(ats.UNDERLYING_MARKET, -1,'*', NUM_TO_STR(ats.UNDERLYING_MARKET)   || ' - ' || (select libelle from marche where mnemomarche in (ats.UNDERLYING_MARKET) )) AS UNDERLYING_MARKET,
      DECODE(ats.WORKFLOW_ID, -1, 'N/A', BCW.NAME) SETTLEMENT_METHOD,
      ats.CODE AS SOURCE_SEQUENCE,
      tr.ident AS THIRD_SOPHIS_ID,
      tr.reference AS THIRD_REFERENCE,
      tr.EXTERNREF AS External_Reference,
      tr.location AS ThirdParty_Location,
      tr.domicile AS ThirdParty_Domicile,
      TRIM(COALESCE(tg.ADDRESS1, '') || ' ' ||
           COALESCE(tg.ADDRESS2, '') || ' ' ||
           COALESCE(tg.ADDRESS3, '') || ' ' ||
           COALESCE(tg.ADDRESS4, '') || ' ' ||
           COALESCE(tg.ADDRESS5, '')) AS Full_Address,
      tg.swift AS SWIFT_CODE,
      tg.fax AS FAX_NUMBER,
      tg.email AS EMAIL,
      tr.NAME TIERName,
      bsp.account_name,
      rsk.name AS USER_NAME,
      'SOPHIS' AS CODE_REMETTANT,
      ci.changer_name,
      ci.change_date
  FROM AUDIT_TIERSSETTLEMENT ats
  LEFT JOIN AUDIT_TIERS_COMPO atc ON ats.code = atc.SEQUENCE
  LEFT JOIN BO_CASH_WORKFLOW BCW ON BCW.ID = ats.WORKFLOW_ID
  LEFT JOIN TIERS tr ON tr.ident = atc.code
  LEFT JOIN TIERS DP ON DP.IDENT = ats.DEPOSITARY
  LEFT JOIN TIERS PS ON PS.IDENT = ats.PLACE_OF_SETTLEMENT
  LEFT JOIN TIERSGENERAL tg ON tg.CODE = tr.ident
  LEFT JOIN AFFECTATION A ON A.IDENT = ats.ALLOTMENT
  LEFT JOIN PAYMENTMETHOD PM ON PM.IDENT = ats.PAYMENT
  LEFT JOIN RISKUSERS rsk ON rsk.ident = atc.ID
  LEFT JOIN BO_SSI_PATH bsp ON bsp.ssi_path_id = ats.ssi_path_id
  LEFT JOIN ChangeInfo ci ON ci.code = ats.code AND ci.sequence = ats.sequence
  WHERE ats.CODE in (:AuditTierSequence, :PreviousAuditTierSequence)
)
