int iMnemonic = Find(header, "Mnemonic");
int iName     = Find(header, "Name");   // NEW required column
int iInst     = Find(header, "InstitutionTypes");
int iCat      = Find(header, "Categories");
int iRep      = Find(header, "Reporting");
int iEnt      = Find(header, "IsEntity");
int iPar      = Find(header, "Parent");

if (iMnemonic < 0 || iName < 0 || iInst < 0)
    throw new InvalidDataException("Required columns missing: Mnemonic, Name, InstitutionTypes.");

.....


string mnemonic = At(iMnemonic);
string name     = At(iName);

var inst   = ParseHelpers.ParseInstitutionFlags(At(iInst));
var cats   = ParseHelpers.ParseCategoryFlags(At(iCat));
var reps   = ParseHelpers.ParseReporting(At(iRep));
var isEnt  = ParseHelpers.ParseNullableBool(At(iEnt));
var parent = ParseHelpers.ParseParent(At(iPar));

if (string.IsNullOrWhiteSpace(mnemonic) ||
    string.IsNullOrWhiteSpace(name) ||
    inst == InstitutionFlags.None)
{
    result.Add(new TierRow {
        Mnemonic = mnemonic,
        Name     = name,
        Institutions = inst,
        Categories   = cats,
        Reporting    = reps,
        IsEntity     = isEnt,
        Parent       = parent,
        Status       = "Failed: invalid required fields"
    });
    continue;
}

result.Add(new TierRow {
    Mnemonic = mnemonic,
    Name     = name,
    Institutions = inst,
    Categories   = cats,
    Reporting    = reps,
    IsEntity     = isEnt,
    Parent       = parent,
    Status       = "Pending"
});

....

dataGridView1.AutoGenerateColumns = false;
dataGridView1.Columns.Clear();

// Mnemonic
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "Mnemonic",
    DataPropertyName = "Mnemonic",
    ReadOnly = true
});

// Name
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "Name",
    DataPropertyName = "Name",
    ReadOnly = true
});

// Institution Types (combo / multivalue handled as string pipe-delimited)
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "InstitutionTypes",
    DataPropertyName = "Institutions"
});

// Categories
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "Categories",
    DataPropertyName = "Categories"
});

// Reporting
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "Reporting",
    DataPropertyName = "Reporting"
});

// IsEntity
dataGridView1.Columns.Add(new DataGridViewCheckBoxColumn {
    HeaderText = "IsEntity",
    DataPropertyName = "IsEntity"
});

// Parent
var parentCol = new DataGridViewComboBoxColumn {
    HeaderText = "Parent",
    DataPropertyName = "Parent",
    DataSource = Enum.GetValues(typeof(ParentOption))
};
dataGridView1.Columns.Add(parentCol);

// Status
dataGridView1.Columns.Add(new DataGridViewTextBoxColumn {
    HeaderText = "Status",
    DataPropertyName = "Status",
    ReadOnly = true
});


....

public class TierRow
{
    public string Mnemonic { get; set; }          // required
    public string Name { get; set; }              // required
    public InstitutionFlags Institutions { get; set; }
    public CategoryFlags Categories { get; set; }
    public ReportingOptions Reporting { get; set; }
    public bool? IsEntity { get; set; }
    public ParentOption Parent { get; set; }

    // runtime status
    public string Status { get; set; }
    public string IndentId { get; set; }
    public string Error { get; set; }
}

