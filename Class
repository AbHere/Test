private async Task<List<TierRow>> LoadCsvAsync(string path, CancellationToken ct = default(CancellationToken))
{
    return await Task.Run(() =>
    {
        var result = new List<TierRow>();

        using (var csv = new CsvReader(path, null))
        {
            string[] header = null;
            int line = 0;

            foreach (var row in csv.ReadRows())
            {
                ct.ThrowIfCancellationRequested();
                line++;

                if (line == 1)
                {
                    header = row.Select(h => (h ?? string.Empty).Trim()).ToArray();

                    int idxMnemonic = Find(header, "Mnemonic");
                    int idxName     = Find(header, "Name");
                    int idxType     = Find(header, "Type");

                    if (idxMnemonic < 0 || idxName < 0 || idxType < 0)
                        throw new InvalidDataException("Colonnes requises manquantes: Mnemonic, Name, Type.");

                    continue;
                }

                int iMnemonic = Find(header, "Mnemonic");
                int iComment  = Find(header, "Comment");
                int iName     = Find(header, "Name");
                int iType     = Find(header, "Type");

                string At(int idx)
                {
                    if (idx < 0 || idx >= row.Length) return null;
                    var v = row[idx];
                    return string.IsNullOrEmpty(v) ? null : v;
                }

                var item = new TierRow
                {
                    Mnemonic = At(iMnemonic),
                    Comment  = At(iComment),
                    Name     = At(iName),
                    Type     = At(iType),
                    Status   = "Pending",
                    IndentId = null
                };

                result.Add(item);
            }
        }

        return result;
    }).ConfigureAwait(false);
}
---------

private async void btnUpload_Click(object sender, EventArgs e)
{
    try
    {
        using (var ofd = new OpenFileDialog
        {
            Title = "Select CSV file",
            Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*",
            RestoreDirectory = true
        })
        {
            if (ofd.ShowDialog(this) != DialogResult.OK) return;

            txtFilePath.Text = ofd.FileName;

            using (var cts = new CancellationTokenSource())
            {
                var rows = await LoadCsvAsync(ofd.FileName, cts.Token).ConfigureAwait(true);

                _rows.Clear();
                foreach (var r in rows) _rows.Add(r);
            }
        }
    }
    catch (OperationCanceledException)
    {
        // annulation utilisateur : no-op
    }
    catch (Exception ex)
    {
        MessageBox.Show(this, "Failed to load CSV:\r\n" + ex.Message,
            "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
}
------
private async void btnSave_Click(object sender, EventArgs e)
{
    if (_rows.Count == 0)
    {
        MessageBox.Show(this, "No rows to process.", "Info",
            MessageBoxButtons.OK, MessageBoxIcon.Information);
        return;
    }

    btnSave.Enabled = false;
    btnUpload.Enabled = false;

    _cts?.Dispose();
    _cts = new CancellationTokenSource();
    var token = _cts.Token;

    using (var wait = new WaitingForm())
    {
        wait.TextLine = "Creating tiers…";
        wait.Max = _rows.Count;
        wait.CanCancel = true;
        wait.OnCancel = () => _cts?.Cancel();
        wait.Show(this);

        try
        {
            var dop = Math.Max(1, Environment.ProcessorCount - 1);
            using (var gate = new System.Threading.SemaphoreSlim(dop))
            {
                int completed = 0;
                var tasks = new List<Task>();

                foreach (var row in _rows)
                {
                    await gate.WaitAsync(token).ConfigureAwait(true);

                    var t = Task.Run(async () =>
                    {
                        try
                        {
                            token.ThrowIfCancellationRequested();
                            UpdateRow(row, "Working…", null);

                            string indent = await CreateTierWithRetryAsync(row, token).ConfigureAwait(false);

                            UpdateRow(row, "Created", indent);
                        }
                        catch (OperationCanceledException)
                        {
                            UpdateRow(row, "Canceled", null);
                        }
                        catch (Exception exRow)
                        {
                            // Court message dans la grille, sans logs
                            var msg = exRow.Message;
                            if (!string.IsNullOrEmpty(msg) && msg.Length > 200)
                                msg = msg.Substring(0, 197) + "…";

                            UpdateRow(row, "Failed: " + (msg ?? "Error"), null);
                        }
                        finally
                        {
                            System.Threading.Interlocked.Increment(ref completed);
                            wait.SafeStep(completed);
                            gate.Release();
                        }
                    }, token);

                    tasks.Add(t);
                }

                await Task.WhenAll(tasks).ConfigureAwait(true);
            }

            // Résumé
            var ok = _rows.Count(r => string.Equals(r.Status, "Created", StringComparison.OrdinalIgnoreCase));
            var ko = _rows.Count(r => r.Status != null && r.Status.StartsWith("Failed", StringComparison.OrdinalIgnoreCase));
            var ca = _rows.Count(r => string.Equals(r.Status, "Canceled", StringComparison.OrdinalIgnoreCase));
            MessageBox.Show(this, $"Done.\r\nCreated: {ok}\r\nFailed: {ko}\r\nCanceled: {ca}", "Summary",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        catch (Exception ex)
        {
            MessageBox.Show(this, "An error occurred:\r\n" + ex.Message,
                "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        finally
        {
            wait.Close();
            btnSave.Enabled = true;
            btnUpload.Enabled = true;

            _cts.Dispose();
            _cts = null;
        }
    }
}
------------
private static async Task<string> CreateTierWithRetryAsync(TierRow row, CancellationToken ct)
{
    const int maxAttempts = 3;
    int attempt = 0;
    Exception last = null;

    while (attempt++ < maxAttempts)
    {
        ct.ThrowIfCancellationRequested();
        try
        {
            return await CreateTierAsync(row, ct).ConfigureAwait(false);
        }
        catch (OperationCanceledException) { throw; }
        catch (Exception ex)
        {
            last = ex;
            if (attempt >= maxAttempts) break;
            await Task.Delay(250 * attempt, ct).ConfigureAwait(false);
        }
    }
    throw last ?? new InvalidOperationException("Unknown error");
}
-----------
protected override void OnHandleCreated(EventArgs e)
{
    base.OnHandleCreated(e);
    try
    {
        typeof(DataGridView).InvokeMember("DoubleBuffered",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.SetProperty,
            null, dataGridView1, new object[] { true });
    }
    catch { /* no-op */ }
}
--------------
public TiersControl()
{
    InitializeComponent();

    dataGridView1.AutoGenerateColumns = false;
    dataGridView1.DataSource = _rows;

    dataGridView1.DataError += (s, e2) =>
    {
        // Empêche les exceptions UI en cas de conversion/format
        e2.ThrowException = false;
    };

    btnUpload.Click += btnUpload_Click;
    btnSave.Click += btnSave_Click;
}
-----------

Mnemonic,Comment,Name,Type
ACC_PAY,Accounts Payable,Accounts Payable,Vendor
ACC_REC,Accounts Receivable,Accounts Receivable,Customer
HR_MAIN,Human Resources master,HR Master,Internal
FIN_TAX,Finance tax profile,Tax Profile,Internal
SUP_EU,Primary supplier in EU,EuroSupplies,Vendor
