If your wrapper exposes GetDescription(out XmlReader), that’s perfect: it gives you the full party XML. You can:

read that XML,

tweak the fields you want,

load the edited XML into a System.Data.DataSet,

call cSMThirdParty.Create(ds) → this creates a brand-new party.

Here’s a clean, self-contained helper that does exactly that.

using System.Data;
using System.IO;
using System.Xml;
using System.Xml.Linq;

public static class SophisPartyFactory
{
    /// <summary>
    /// Clone-by-XML: copy an existing party's full description, edit it, then Create(ds).
    /// </summary>
    public static int CreateFromTemplate(
        string templateReference,     // e.g. "CDCM" (any valid party)
        string shortName,
        string longName,
        string uniqueCode,            // must be unique (avoid DuplicatePartyException)
        string domicile = null,
        string location = null
    )
    {
        // 1) Get template party
        var template = cSMThirdParty.GetcSMThirdPartyByReference(templateReference);

        // 2) Pull FULL description as XML
        template.GetDescription(out XmlReader reader);   // your screenshot shows this API
        XDocument xdoc = XDocument.Load(reader);
        reader.Dispose();

        // 3) Edit the XML
        XNamespace ns = "www.sophis.net/party";
        var party = xdoc.Root?.Element(ns + "party");    // must be <party> (not <partyReference>)
        if (party == null)
            throw new InvalidOperationException("GetDescription did not return a <party> element.");

        Set(party, ns, "ShortName", shortName);
        Set(party, ns, "LongName",  longName);
        if (!string.IsNullOrEmpty(location)) Set(party, ns, "Location", location);
        if (!string.IsNullOrEmpty(domicile)) Set(party, ns, "Domicile", domicile);

        // Replace identifiers to ensure uniqueness
        var idents = party.Element(ns + "Identifiers");
        if (idents != null) idents.Remove();
        idents = new XElement(ns + "Identifiers");
        idents.Add(new XElement(ns + "Identifier",
                     new XElement(ns + "Name",  "Code"),    // use your site’s identifier label if different
                     new XElement(ns + "Value", uniqueCode)));
        party.Add(idents);

        // If your site requires other mandatory blocks (Category/Status/etc.), keep them from the template
        // or Set(...) them explicitly the same way as above.

        // 4) Load the edited XML into a System.Data.DataSet (your wrapper marshals this internally)
        var ds = new DataSet();
        using (var sr = new StringReader(xdoc.ToString()))
            ds.ReadXml(sr, XmlReadMode.Auto);

        // 5) Create the new party
        var created = cSMThirdParty.Create(ds);
        return created.GetIdent();
    }

    private static void Set(XElement parent, XNamespace ns, string name, string value)
    {
        var el = parent.Element(ns + name);
        if (el == null) { el = new XElement(ns + name); parent.Add(el); }
        el.Value = value ?? string.Empty;
    }
}


Usage:

int newIdent = SophisPartyFactory.CreateFromTemplate(
    templateReference: "CDCM",
    shortName:  "ACME",
    longName:   "ACME Corporation",
    uniqueCode: "ACME001",
    domicile:   "GB",
    location:   "LON"
);

Why this is the best fit for your setup

It uses the exact XML shape your installation expects (no guessing).

It avoids mutating the original party.

It stays inside the APIs your wrapper exposes: GetDescription(out XmlReader) + Create(System.Data.DataSet).

Troubleshooting cheatsheet

DuplicatePartyException → change uniqueCode or short name; it collides with an existing identifier.

InvalidDataValue → a required field (per your site’s party.xsd/rules) is missing or invalid. Keep the template’s structure and only change values you must; add more Set(...) lines if needed (Category, Status, Country, etc.).

If GetDescription ever returns only a <partyReference> (rare), then it’s not the right call. But your screenshot implies it returns the full description—just confirm by logging xdoc.ToString() once.

-----------

Mnemonic,Comment,Name,Type
ACC_PAY,Accounts Payable,Accounts Payable,Vendor
ACC_REC,Accounts Receivable,Accounts Receivable,Customer
HR_MAIN,Human Resources master,HR Master,Internal
FIN_TAX,Finance tax profile,Tax Profile,Internal
SUP_EU,Primary supplier in EU,EuroSupplies,Vendor
