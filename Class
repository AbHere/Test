CREATE OR REPLACE FUNCTION IsFixingClausesConsistent(sicovamValue IN NUMBER)
RETURN VARCHAR2 IS
    v_result VARCHAR2(100) := 'OK';
    v_count_dates NUMBER := 0;
    v_count_dates_clotures NUMBER := 0;
    v_missing_underlying_count NUMBER := 0;
    v_expected_code_count NUMBER := 0;
    v_count_missing_sousjacents NUMBER := 0;

    CURSOR c_baskets IS
        SELECT p.sicopanier
        FROM panier p
        WHERE p.sicovam = sicovamValue
        AND p.quantite = 1;

BEGIN
    -- Check the main sicovamValue first
    DECLARE
        v_main_result VARCHAR2(100) := 'OK';
    BEGIN
        -- Count dates without corresponding closures
        SELECT COUNT(*)
        INTO v_count_dates
        FROM CDC_IFC_CLAUSE_HYBPAN c
        WHERE c.CDC_IFC_DATEFIN IS NOT NULL
        AND c.CODE = sicovamValue
        AND NOT EXISTS (
            SELECT 1
            FROM CDC_IFC_CLOTURES f
            WHERE f.CDC_IFC_DATE = c.CDC_IFC_DATEFIN
            AND f.code = sicovamValue
        );

        -- Count closure dates without corresponding clauses
        SELECT COUNT(*)
        INTO v_count_dates_clotures
        FROM CDC_IFC_CLOTURES f
        WHERE f.code = sicovamValue
        AND NOT EXISTS (
            SELECT 1
            FROM CDC_IFC_CLAUSE_HYBPAN c
            WHERE f.CDC_IFC_DATE = c.CDC_IFC_DATEFIN
            AND c.code = sicovamValue
        );

        IF v_count_dates > 0 OR v_count_dates_clotures > 0 THEN
            v_main_result := 'Dates KO';
        END IF;

        -- Count missing underlying components
        SELECT COUNT(DISTINCT p.sicopanier)
        INTO v_missing_underlying_count
        FROM titres t
        INNER JOIN panier p ON p.sicovam = t.codesj
        WHERE t.sicovam = sicovamValue
        AND p.sicopanier NOT IN (
            SELECT DISTINCT CDC_IFC_CODE_SJ
            FROM CDC_IFC_CLOTURES
            WHERE Code = sicovamValue
        );

        IF v_missing_underlying_count > 0 THEN
            IF v_main_result = 'Dates KO' THEN
                v_main_result := 'Dates and underlying KO';
            ELSE
                v_main_result := 'Underlying KO';
            END IF;
        END IF;

        -- Count expected codes
        SELECT COUNT(DISTINCT p.sicopanier)
        INTO v_expected_code_count
        FROM titres t
        INNER JOIN panier p ON p.sicovam = t.codesj
        WHERE t.sicovam = sicovamValue;

        FOR r_date IN (
            SELECT DISTINCT CDC_IFC_DATE
            FROM CDC_IFC_CLOTURES
            WHERE Code = sicovamValue
        ) LOOP
            SELECT COUNT(DISTINCT CDC_IFC_CODE_SJ)
            INTO v_count_missing_sousjacents
            FROM CDC_IFC_CLOTURES
            WHERE Code = sicovamValue
            AND CDC_IFC_DATE = r_date.CDC_IFC_DATE;

            IF v_count_missing_sousjacents < v_expected_code_count AND v_missing_underlying_count = 0 THEN
                IF v_main_result = 'OK' THEN
                    v_main_result := 'Dates KO';
                ELSIF v_main_result = 'Underlying KO' THEN
                    v_main_result := 'Dates and underlying KO';
                END IF;
            END IF;
        END LOOP;

        -- Update overall result
        v_result := v_main_result; 
    END;

    -- Now check each associated basket
    FOR r_basket IN c_baskets LOOP
        DECLARE
            v_basket_result VARCHAR2(100) := 'OK';
        BEGIN
            -- Count dates without corresponding closures
            SELECT COUNT(*)
            INTO v_count_dates
            FROM CDC_IFC_CLAUSE_HYBPAN c
            WHERE c.CDC_IFC_DATEFIN IS NOT NULL
            AND c.CODE = r_basket.sicopanier
            AND NOT EXISTS (
                SELECT 1
                FROM CDC_IFC_CLOTURES f
                WHERE f.CDC_IFC_DATE = c.CDC_IFC_DATEFIN
                AND f.code = r_basket.sicopanier
            );

            -- Count closure dates without corresponding clauses
            SELECT COUNT(*)
            INTO v_count_dates_clotures
            FROM CDC_IFC_CLOTURES f
            WHERE f.code = r_basket.sicopanier
            AND NOT EXISTS (
                SELECT 1
                FROM CDC_IFC_CLAUSE_HYBPAN c
                WHERE f.CDC_IFC_DATE = c.CDC_IFC_DATEFIN
                AND c.code = r_basket.sicopanier
            );

            IF v_count_dates > 0 OR v_count_dates_clotures > 0 THEN
                v_basket_result := 'Dates KO';
            END IF;

            -- Count missing underlying components for this basket
            SELECT COUNT(DISTINCT p.sicopanier)
            INTO v_missing_underlying_count
            FROM titres t
            INNER JOIN panier p ON p.sicovam = t.codesj
            WHERE t.sicovam = r_basket.sicopanier
            AND p.sicopanier NOT IN (
                SELECT DISTINCT CDC_IFC_CODE_SJ
                FROM CDC_IFC_CLOTURES
                WHERE Code = r_basket.sicopanier
            );

            IF v_missing_underlying_count > 0 THEN
                IF v_basket_result = 'Dates KO' THEN
                    v_basket_result := 'Dates and underlying KO';
                ELSE
                    v_basket_result := 'Underlying KO';
                END IF;
            END IF;

            SELECT COUNT(DISTINCT p.sicopanier)
            INTO v_expected_code_count
            FROM titres t
            INNER JOIN panier p ON p.sicovam = t.codesj
            WHERE t.sicovam = r_basket.sicopanier;

            FOR r_date IN (
                SELECT DISTINCT CDC_IFC_DATE
                FROM CDC_IFC_CLOTURES
                WHERE Code = r_basket.sicopanier
            ) LOOP
                SELECT COUNT(DISTINCT CDC_IFC_CODE_SJ)
                INTO v_count_missing_sousjacents
                FROM CDC_IFC_CLOTURES
                WHERE Code = r_basket.sicopanier
                AND CDC_IFC_DATE = r_date.CDC_IFC_DATE;

                IF v_count_missing_sousjacents < v_expected_code_count AND v_missing_underlying_count = 0 THEN
                    IF v_basket_result = 'OK' THEN
                        v_basket_result := 'Dates KO';
                    ELSIF v_basket_result = 'Underlying KO' THEN
                        v_basket_result := 'Dates and underlying KO';
                    END IF;
                END IF;
            END LOOP;

            IF v_basket_result != 'OK' THEN
                v_result := v_basket_result; 
            END IF;

        END; 
    END LOOP;

    RETURN v_result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END IsFixingClausesConsistent;
/
